public with sharing class RecordsFetcherClass {
    @AuraEnabled(Cacheable=true)
    public static map<String,String> FetchObjectName(){
        try {
           
          Map<String,String> objmap=new Map<String,String>();
         
            for(Schema.SObjectType objNameType : Schema.getGlobalDescribe().values()){
                Schema.DescribeSObjectResult DescribeSObjectResult=objNameType.getDescribe(); 
                 String name=objNameType.getDescribe().getLocalName();
                 String label=objNameType.getDescribe().getLabel();
                objmap.put(name,label);
            }
          return objmap;
            }
        catch (Exception e) {
            throw new AuraHandledException(e.getMessage());
        }
    }

    @AuraEnabled(cacheable=true)
    public static Map<String,String> getFields(String ObjectName){
        try {
            Map<String, String> fieldNamesMap=new Map<String,string>();
            Map<String, Schema.SObjectType> fieldMap = Schema.getGlobalDescribe();
            for(Schema.SObjectField fields:fieldMap.get(ObjectName).getDescribe().fields.getMap().values()){
                fieldNamesMap.put(fields.getDescribe().getName(),fields.getDescribe().getName());
            }  
            return fieldNamesMap;
        } catch (Exception e) {
            throw new AuraHandledException(e.getMessage());
        }
    }

    @AuraEnabled(cacheable=true)
    public static list<sObject> getRecords(String objectName, List<String> fieldNames) {
        List<sObject> records = new List<sObject>();

        if (fieldNames != null && !fieldNames.isEmpty()) {
            String soql = 'SELECT ';
            for (String fieldName : fieldNames) {
                soql += fieldName + ',';
            }
            soql = soql.removeEnd(',');
            soql += ' FROM ' + objectName;
            records = Database.query(soql);
        }
        return records;
    }
    
}